module {Tonic.Tonic}
{
from Text.PPrint import :: Doc
import Tonic.AbsSyn

from syntax import
  :: Expression (..), :: BoundVar {..}, :: App {..}, :: Let {..}, :: Case,
  :: SelectorKind, :: Selection (..), :: FreeVar {..}, :: Global {..},
  :: SymbIdent {..}, :: SymbKind, :: Priority (..), :: Assoc (..), :: VarInfoPtr, :: DynamicExpr,
  :: Ptr, :: VarInfo, :: CodeBinding, :: DefinedSymbol {..}, :: Index, :: Bind,
  :: Position, :: AType, :: Env, :: Ident {..}, :: SymbolPtr,
  :: SymbolTableEntry, :: Level, :: ExprInfoPtr, :: ExprInfo,
  :: TypeCodeExpression, :: GlobalIndex, :: Conditional, :: BasicValue (..),
  :: FieldSymbol, :: IclModule, :: DclModule, :: FunDef, :: Optional,
  :: SymbolType {..}, :: LetBind, :: TypeVar {..}, :: StrictnessList (..),
  :: TypeContext {..}, :: AttributeVar {..}, :: AttrInequality {..},
  :: TypeVarInfoPtr {..}, :: AttrVarInfoPtr, :: Type, :: TCClass,
  :: TypeVarInfo, :: AttrVarInfo, :: FunType {..}, :: FunSpecials

:: Expressions :== [Expression]
:: GLetBinds :== [GLetBind]
:: Selections :== [Selection]
:: GlobalDefinedSymbol :== Global DefinedSymbol
:: FreeVars :== [FreeVar]

ppCompact :: (Doc -> String)

ppExpression :: ModuleEnv Expression -> Doc

ppDebugExpression :: ModuleEnv Expression -> Doc

ppFreeVar :: ModuleEnv FreeVar -> Doc

mkPPInhExpression :: ModuleEnv -> Inh_Expression

mkPPInhFreeVar :: ModuleEnv -> Inh_FreeVar

mkTaskDot :: ModuleEnv String GGraph -> String

mkDotAttrKV :: String String -> String

mkDotArgs :: [String] -> String

mkDotNodeLbl :: String Int -> String

nodeToDot :: ModuleEnv String GinGraph Int -> String

getNodeData` :: Int GinGraph -> GNode

funToGraph :: FunDef {#FunDef} IclModule {#DclModule} -> Optional GGraph
}
{}
include "ExprSyn.ag"
include "Pretty.ag"
include "MkGraph.ag"
