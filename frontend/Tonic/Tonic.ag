module {Tonic.Tonic}
{
from Text.PPrint import :: Doc
import Tonic.AbsSyn

from syntax import :: FunType, :: Index, :: FunSpecials, :: SymbolPtr,
  :: Assoc, :: SymbKind, :: TypeVar, :: StrictnessList, :: TypeContext,
  :: AttributeVar, :: AttrInequality, :: SymbolTableEntry

:: Expressions :== [Expression]
:: GLetBinds :== [GLetBind]
:: Selections :== [Selection]
:: GlobalDefinedSymbol :== Global DefinedSymbol
:: FreeVars :== [FreeVar]
:: MaybeExpression :== Maybe Expression

ppCompact :: (Doc -> String)

ppExpression :: ModuleEnv Expression -> Doc

ppDebugExpression :: ModuleEnv Expression -> Doc

ppFreeVar :: ModuleEnv FreeVar -> Doc

mkPPInhExpression :: ModuleEnv -> Inh_Expression

mkPPInhFreeVar :: ModuleEnv -> Inh_FreeVar

mkTaskDot :: ModuleEnv String GGraph -> String

mkDotAttrKV :: String String -> String

mkDotArgs :: [String] -> String

mkDotNodeLbl :: String Int -> String

nodeToDot :: ModuleEnv String GinGraph Int -> String

getNodeData` :: Int GinGraph -> GNode

funToGraph :: FunDef {#FunDef} IclModule {#DclModule} -> Optional GGraph
}
{}
include "ExprSyn.ag"
include "Pretty.ag"
include "MkGraph.ag"
